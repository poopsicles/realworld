// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Realworld.Contexts;

#nullable disable

namespace realworld.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ArticleTags", b =>
                {
                    b.Property<int>("articleID")
                        .HasColumnType("integer");

                    b.Property<int>("tagID")
                        .HasColumnType("integer");

                    b.HasKey("articleID", "tagID");

                    b.HasIndex("tagID");

                    b.ToTable("ArticleTags");
                });

            modelBuilder.Entity("Realworld.Models.ArticleModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<Guid>("authorID")
                        .HasColumnType("uuid");

                    b.Property<string>("body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("favoritesCount")
                        .HasColumnType("integer");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ID");

                    b.HasIndex("authorID");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("Realworld.Models.CommentModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("articleID")
                        .HasColumnType("integer");

                    b.Property<Guid>("authorID")
                        .HasColumnType("uuid");

                    b.Property<string>("body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ID");

                    b.HasIndex("articleID");

                    b.HasIndex("authorID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Realworld.Models.TagModel", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Realworld.Models.UserModel", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("bio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UserFavouriteArticles", b =>
                {
                    b.Property<int>("articleID")
                        .HasColumnType("integer");

                    b.Property<Guid>("userID")
                        .HasColumnType("uuid");

                    b.HasKey("articleID", "userID");

                    b.HasIndex("userID");

                    b.ToTable("UserFavouriteArticles");
                });

            modelBuilder.Entity("UserFollowing", b =>
                {
                    b.Property<Guid>("userFollowingID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("userID")
                        .HasColumnType("uuid");

                    b.HasKey("userFollowingID");

                    b.HasIndex("userID");

                    b.ToTable("UserFollowing");
                });

            modelBuilder.Entity("ArticleTags", b =>
                {
                    b.HasOne("Realworld.Models.ArticleModel", null)
                        .WithMany()
                        .HasForeignKey("articleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Realworld.Models.TagModel", null)
                        .WithMany()
                        .HasForeignKey("tagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Realworld.Models.ArticleModel", b =>
                {
                    b.HasOne("Realworld.Models.UserModel", "author")
                        .WithMany()
                        .HasForeignKey("authorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("author");
                });

            modelBuilder.Entity("Realworld.Models.CommentModel", b =>
                {
                    b.HasOne("Realworld.Models.ArticleModel", "article")
                        .WithMany("comments")
                        .HasForeignKey("articleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Realworld.Models.UserModel", "author")
                        .WithMany()
                        .HasForeignKey("authorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("article");

                    b.Navigation("author");
                });

            modelBuilder.Entity("UserFavouriteArticles", b =>
                {
                    b.HasOne("Realworld.Models.ArticleModel", null)
                        .WithMany()
                        .HasForeignKey("articleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Realworld.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserFollowing", b =>
                {
                    b.HasOne("Realworld.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("userFollowingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Realworld.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("userID");
                });

            modelBuilder.Entity("Realworld.Models.ArticleModel", b =>
                {
                    b.Navigation("comments");
                });
#pragma warning restore 612, 618
        }
    }
}
